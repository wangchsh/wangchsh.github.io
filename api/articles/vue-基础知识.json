{"title":"VUE记录","slug":"vue-基础知识","date":"2017-07-08T03:15:00.000Z","updated":"2017-11-19T03:13:50.517Z","comments":true,"excerpt":"","content":"<h3 id=\"根据模板创建项目\"><a href=\"#根据模板创建项目\" class=\"headerlink\" title=\"根据模板创建项目\"></a>根据模板创建项目</h3><p><code>vue init webpack-simple</code> 工程名字&lt;工程名字不能用中文&gt;<br>或者创建 vue1.0 的项目<br><code>vue init webpack-simple#1.0</code> 工程名字&lt;工程名字不能用中文&gt;</p>\n<p>会有一些初始化的设置，如下输入:<br><code>Target directory exists. Continue?</code>(Y/n)直接回车默认(然后会下载 vue2.0模板，这里可能需要连代理)<br><code>Project name (vue-test)</code>直接回车默认<br><code>Project description (A Vue.js project)</code> 直接回车默认<br><code>Author</code>写你自己的名字</p>\n<p><code>vue2.0:\n    bower info vue</code></p>\n<pre><code>http://vuejs.org/\n</code></pre><p>到了2.0以后，有哪些变化?</p>\n<h3 id=\"1-在每个组件模板，不在支持片段代码\"><a href=\"#1-在每个组件模板，不在支持片段代码\" class=\"headerlink\" title=\"1. 在每个组件模板，不在支持片段代码\"></a>1. 在每个组件模板，不在支持片段代码</h3><pre><code>组件中模板:\n    之前:\n        &lt;template&gt;\n            &lt;h3&gt;我是组件&lt;/h3&gt;&lt;strong&gt;我是加粗标签&lt;/strong&gt;\n        &lt;/template&gt;\n    现在:  必须有根元素，包裹住所有的代码\n        &lt;template id=&quot;aaa&quot;&gt;\n                &lt;div&gt;\n                    &lt;h3&gt;我是组件&lt;/h3&gt;\n                    &lt;strong&gt;我是加粗标签&lt;/strong&gt;\n                &lt;/div&gt;\n        &lt;/template&gt;\n</code></pre><h3 id=\"2-关于组件定义\"><a href=\"#2-关于组件定义\" class=\"headerlink\" title=\"2. 关于组件定义\"></a>2. 关于组件定义</h3><pre><code>`Vue.extend`    这种方式，在2.0里面有，但是有一些改动，这种写法，即使能用，咱也不用——废弃\n\nVue.component(组件名称,{    在2.0继续能用\n    data(){}\n    methods:{}\n    template:\n});\n\n2.0推出一个组件，简洁定义方式：\nvar Home={\n    template:&#39;&#39;        -&gt;   Vue.extend()\n};\n</code></pre><h3 id=\"3-生命周期\"><a href=\"#3-生命周期\" class=\"headerlink\" title=\"3. 生命周期\"></a>3. 生命周期</h3><pre><code>之前:\n    init    \n    created\n    beforeCompile\n    compiled\n    ready        √    -&gt;     mounted\n    beforeDestroy    \n    destroyed\n现在:\n    beforeCreate    组件实例刚刚被创建,属性都没有\n    created            实例已经创建完成，属性已经绑定\n    beforeMount    模板编译之前\n    mounted      模板编译之后，代替之前ready  *\n    beforeUpdate    组件更新之前\n    updated         组件更新完毕    *\n    beforeDestroy    组件销毁前\n    destroyed    组件销毁后\n</code></pre><h3 id=\"3-循环\"><a href=\"#3-循环\" class=\"headerlink\" title=\"3. 循环\"></a>3. 循环</h3><pre><code>2.0里面默认就可以添加重复数据\n\narr.forEach(function(item,index){\n\n});\n\n去掉了隐式一些变量\n    $index    $key\n\n之前:\n    v-for=&quot;(index,val) in array&quot;\n现在:\n    v-for=&quot;(val,index) in array&quot;\n</code></pre><h3 id=\"4-track-by-”id”\"><a href=\"#4-track-by-”id”\" class=\"headerlink\" title=\"4. track-by=”id”\"></a>4. track-by=”id”</h3><pre><code>变成\n    &lt;li v-for=&quot;(val,index) in list&quot; :key=&quot;index&quot;&gt;\n</code></pre><h3 id=\"5-自定义键盘指令\"><a href=\"#5-自定义键盘指令\" class=\"headerlink\" title=\"5. 自定义键盘指令\"></a>5. 自定义键盘指令</h3><pre><code>之前：Vue.directive(&#39;on&#39;).keyCodes.f1=17;    \n\n现在:  Vue.config.keyCodes.ctrl=17\n</code></pre><h3 id=\"6-过滤器\"><a href=\"#6-过滤器\" class=\"headerlink\" title=\"6. 过滤器\"></a>6. 过滤器</h3><pre><code>之前:\n    系统就自带很多过滤\n    {{msg | currency}}\n    {{msg | json}}\n    ....\n    limitBy\n    filterBy\n    .....\n一些简单功能，自己通过js实现\n\n到了2.0， 内置过滤器，全部删除了\n\n\nlodash    工具库    _.debounce(fn,200)\n\n\n自定义过滤器——还有\n    但是,自定义过滤器传参\n\n    之前:    {{msg | toDou '12' '5'}}\n    现在:     {{msg | toDou('12','5')}}\n</code></pre><h3 id=\"组件通信\"><a href=\"#组件通信\" class=\"headerlink\" title=\"组件通信:\"></a>组件通信:</h3><pre><code>vm.$emit()\nvm.$on();\n\n父组件和子组件:\n\n子组件想要拿到父组件数据:\n    通过  props\n\n之前，子组件可以更改父组件信息，可以是同步  sync\n现在，不允许直接给父级的数据，做赋值操作\n\n问题，就想更改：\n    a). 父组件每次传一个对象给子组件, 对象之间引用    √\n    b). 只是不报错, mounted中转\n</code></pre><h3 id=\"可以单一事件管理组件通信-vuex\"><a href=\"#可以单一事件管理组件通信-vuex\" class=\"headerlink\" title=\"可以单一事件管理组件通信:    vuex\"></a>可以单一事件管理组件通信:    vuex</h3><pre><code>var Event=new Vue();\n\nEvent.$emit(事件名称, 数据)\n\nEvent.$on(事件名称,function(data){\n    //data\n}.bind(this));\n\ndebounce    废弃\n-&gt;   lodash\n    _.debounce(fn,时间)\n</code></pre><h3 id=\"vue动画\"><a href=\"#vue动画\" class=\"headerlink\" title=\"vue动画\"></a>vue动画</h3><h6 id=\"transition-之前-属性\"><a href=\"#transition-之前-属性\" class=\"headerlink\" title=\"transition 之前  属性\"></a>transition 之前  属性</h6><p><code>&lt;p transition=&quot;fade&quot;&gt;&lt;/p&gt;</code></p>\n<p>.fade-transition{}<br>.fade-enter{}<br>.fade-leave{}</p>\n<h6 id=\"到2-0以后-transition-组件\"><a href=\"#到2-0以后-transition-组件\" class=\"headerlink\" title=\"到2.0以后 transition 组件\"></a>到2.0以后 transition 组件</h6><p><code>&lt;transition name=&quot;fade&quot;&gt;\n    运动东西(元素，属性、路由....)\n&lt;/transition&gt;</code></p>\n<p>class定义:<br>``` .fade-enter{}    //初始状态<br>.fade-enter-active{}  //变化成什么样  -&gt;  当元素出来(显示)</p>\n<p>.fade-leave{}<br>.fade-leave-active{} //变成成什么样   -&gt; 当元素离开(消失)</p>\n<pre><code>如何animate.css配合用？\n    ` &lt;transition enter-active-class=&quot;animated zoomInLeft&quot; leave-active-class=&quot;animated zoomOutRight&quot;&gt;\n                &lt;p v-show=&quot;show&quot;&gt;&lt;/p&gt;\n            &lt;/transition&gt;`\n\n多个元素运动:\n    ``` &lt;transition-group enter-active-class=&quot;&quot; leave-active-class=&quot;&quot;&gt;\n        &lt;p :key=&quot;&quot;&gt;&lt;/p&gt;\n        &lt;p :key=&quot;&quot;&gt;&lt;/p&gt;\n    &lt;/transition-group&gt;\n</code></pre><h3 id=\"vue2-0-路由\"><a href=\"#vue2-0-路由\" class=\"headerlink\" title=\"vue2.0 路由:\"></a>vue2.0 路由:</h3><p><a href=\"http:://router.vuejs.org/zh-cn/index.html\" target=\"_blank\" rel=\"external\">官方介绍</a></p>\n<p>基本使用:</p>\n<h4 id=\"1-布局\"><a href=\"#1-布局\" class=\"headerlink\" title=\"1.  布局\"></a>1.  布局</h4><pre><code>&lt;router-link to=&quot;/home&quot;&gt;主页&lt;/router-link&gt;\n\n&lt;router-view&gt;&lt;/router-view&gt;\n</code></pre><h4 id=\"2-路由具体写法\"><a href=\"#2-路由具体写法\" class=\"headerlink\" title=\"2. 路由具体写法\"></a>2. 路由具体写法</h4><pre><code>//组件\nvar Home={\n    template:&#39;&lt;h3&gt;我是主页&lt;/h3&gt;&#39;\n};\nvar News={\n    template:&#39;&lt;h3&gt;我是新闻&lt;/h3&gt;&#39;\n};\n\n//配置路由\nconst routes=[\n    {path:&#39;/home&#39;, componet:Home},\n    {path:&#39;/news&#39;, componet:News},\n];\n\n//生成路由实例\nconst router=new VueRouter({\n    routes\n});\n\n//最后挂到vue上\nnew Vue({\n    router,\n    el:&#39;#box&#39;\n});\n</code></pre><h4 id=\"3-重定向\"><a href=\"#3-重定向\" class=\"headerlink\" title=\"3. 重定向\"></a>3. 重定向</h4><pre><code>之前  router.rediect  废弃了\n{path:&#39;*&#39;, redirect:&#39;/home&#39;}\n</code></pre><h3 id=\"路由嵌套\"><a href=\"#路由嵌套\" class=\"headerlink\" title=\"路由嵌套:\"></a>路由嵌套:</h3><pre><code>/user/username\n\nconst routes=[\n    {path:&#39;/home&#39;, component:Home},\n    {\n        path:&#39;/user&#39;,\n        component:User,\n        children:[  //核心\n            {path:&#39;username&#39;, component:UserDetail}\n        ]\n    },\n    {path:&#39;*&#39;, redirect:&#39;/home&#39;}  //404\n];\n</code></pre><h4 id=\"路由实例方法\"><a href=\"#路由实例方法\" class=\"headerlink\" title=\"路由实例方法:\"></a>路由实例方法:</h4><pre><code>router.push({path:&#39;home&#39;});  //直接添加一个路由,表现切换路由，本质往历史记录里面添加一个\nrouter.replace({path:&#39;news&#39;}) //替换路由，不会往历史记录里面添加\n</code></pre>","categories":[{"name":"vue","path":"api/categories/vue.json"}],"tags":[{"name":"vue","path":"api/tags/vue.json"}]}